{"remainingRequest":"/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/node_modules/thread-loader/dist/cjs.js!/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/node_modules/babel-loader/lib/index.js!/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/src/utils/generator/render.js","dependencies":[{"path":"/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/src/utils/generator/render.js","mtime":1645620179148},{"path":"/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/babel.config.js","mtime":1645620179122},{"path":"/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/node_modules/cache-loader/dist/cjs.js","mtime":1645761092000},{"path":"/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/node_modules/thread-loader/dist/cjs.js","mtime":1645761092000},{"path":"/Users/libaojian/Desktop/Blockchain-APTrace-Fabric/blockchain-trace-pc/node_modules/babel-loader/lib/index.js","mtime":1645761092000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0IHsgbWFrZU1hcCB9IGZyb20gJ0AvdXRpbHMvaW5kZXgnOyAvLyDlj4LogINodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL2Jsb2IvdjIuNi4xMC9zcmMvcGxhdGZvcm1zL3dlYi9zZXJ2ZXIvdXRpbC5qcwoKdmFyIGlzQXR0ciA9IG1ha2VNYXAoJ2FjY2VwdCxhY2NlcHQtY2hhcnNldCxhY2Nlc3NrZXksYWN0aW9uLGFsaWduLGFsdCxhc3luYyxhdXRvY29tcGxldGUsJyArICdhdXRvZm9jdXMsYXV0b3BsYXksYXV0b3NhdmUsYmdjb2xvcixib3JkZXIsYnVmZmVyZWQsY2hhbGxlbmdlLGNoYXJzZXQsJyArICdjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxjb2RlYmFzZSxjb2xvcixjb2xzLGNvbHNwYW4sY29udGVudCxodHRwLWVxdWl2LCcgKyAnbmFtZSxjb250ZW50ZWRpdGFibGUsY29udGV4dG1lbnUsY29udHJvbHMsY29vcmRzLGRhdGEsZGF0ZXRpbWUsZGVmYXVsdCwnICsgJ2RlZmVyLGRpcixkaXJuYW1lLGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLG1ldGhvZCxmb3IsJyArICdmb3JtLGZvcm1hY3Rpb24saGVhZGVycyxoZWlnaHQsaGlkZGVuLGhpZ2gsaHJlZixocmVmbGFuZyxodHRwLWVxdWl2LCcgKyAnaWNvbixpZCxpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsaXN0LGxvb3AsbG93LCcgKyAnbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtZWRpYSxtZXRob2QsR0VULFBPU1QsbWluLG11bHRpcGxlLGVtYWlsLGZpbGUsJyArICdtdXRlZCxuYW1lLG5vdmFsaWRhdGUsb3BlbixvcHRpbXVtLHBhdHRlcm4scGluZyxwbGFjZWhvbGRlcixwb3N0ZXIsJyArICdwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHkscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LCcgKyAnc2NvcGUsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNoYXBlLHNpemUsdHlwZSx0ZXh0LHBhc3N3b3JkLHNpemVzLHNwYW4sJyArICdzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LCcgKyAndGFyZ2V0LHRpdGxlLHR5cGUsdXNlbWFwLHZhbHVlLHdpZHRoLHdyYXAnKTsKCmZ1bmN0aW9uIHZNb2RlbChzZWxmLCBkYXRhT2JqZWN0LCBkZWZhdWx0VmFsdWUpIHsKICBkYXRhT2JqZWN0LnByb3BzLnZhbHVlID0gZGVmYXVsdFZhbHVlOwoKICBkYXRhT2JqZWN0Lm9uLmlucHV0ID0gZnVuY3Rpb24gKHZhbCkgewogICAgc2VsZi4kZW1pdCgnaW5wdXQnLCB2YWwpOwogIH07Cn0KCnZhciBjb21wb25lbnRDaGlsZCA9IHsKICAnZWwtYnV0dG9uJzogewogICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoaCwgY29uZiwga2V5KSB7CiAgICAgIHJldHVybiBjb25mW2tleV07CiAgICB9CiAgfSwKICAnZWwtaW5wdXQnOiB7CiAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKGgsIGNvbmYsIGtleSkgewogICAgICByZXR1cm4gaCgidGVtcGxhdGUiLCB7CiAgICAgICAgInNsb3QiOiAicHJlcGVuZCIKICAgICAgfSwgW2NvbmZba2V5XV0pOwogICAgfSwKICAgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKGgsIGNvbmYsIGtleSkgewogICAgICByZXR1cm4gaCgidGVtcGxhdGUiLCB7CiAgICAgICAgInNsb3QiOiAiYXBwZW5kIgogICAgICB9LCBbY29uZltrZXldXSk7CiAgICB9CiAgfSwKICAnZWwtc2VsZWN0JzogewogICAgb3B0aW9uczogZnVuY3Rpb24gb3B0aW9ucyhoLCBjb25mLCBrZXkpIHsKICAgICAgdmFyIGxpc3QgPSBbXTsKICAgICAgY29uZi5vcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBsaXN0LnB1c2goaCgiZWwtb3B0aW9uIiwgewogICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAibGFiZWwiOiBpdGVtLmxhYmVsLAogICAgICAgICAgICAidmFsdWUiOiBpdGVtLnZhbHVlLAogICAgICAgICAgICAiZGlzYWJsZWQiOiBpdGVtLmRpc2FibGVkCiAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGxpc3Q7CiAgICB9CiAgfSwKICAnZWwtcmFkaW8tZ3JvdXAnOiB7CiAgICBvcHRpb25zOiBmdW5jdGlvbiBvcHRpb25zKGgsIGNvbmYsIGtleSkgewogICAgICB2YXIgbGlzdCA9IFtdOwogICAgICBjb25mLm9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGlmIChjb25mLm9wdGlvblR5cGUgPT09ICdidXR0b24nKSBsaXN0LnB1c2goaCgiZWwtcmFkaW8tYnV0dG9uIiwgewogICAgICAgICAgImF0dHJzIjogewogICAgICAgICAgICAibGFiZWwiOiBpdGVtLnZhbHVlCiAgICAgICAgICB9CiAgICAgICAgfSwgW2l0ZW0ubGFiZWxdKSk7ZWxzZSBsaXN0LnB1c2goaCgiZWwtcmFkaW8iLCB7CiAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICJsYWJlbCI6IGl0ZW0udmFsdWUsCiAgICAgICAgICAgICJib3JkZXIiOiBjb25mLmJvcmRlcgogICAgICAgICAgfQogICAgICAgIH0sIFtpdGVtLmxhYmVsXSkpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGxpc3Q7CiAgICB9CiAgfSwKICAnZWwtY2hlY2tib3gtZ3JvdXAnOiB7CiAgICBvcHRpb25zOiBmdW5jdGlvbiBvcHRpb25zKGgsIGNvbmYsIGtleSkgewogICAgICB2YXIgbGlzdCA9IFtdOwogICAgICBjb25mLm9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGlmIChjb25mLm9wdGlvblR5cGUgPT09ICdidXR0b24nKSB7CiAgICAgICAgICBsaXN0LnB1c2goaCgiZWwtY2hlY2tib3gtYnV0dG9uIiwgewogICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgImxhYmVsIjogaXRlbS52YWx1ZQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBbaXRlbS5sYWJlbF0pKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbGlzdC5wdXNoKGgoImVsLWNoZWNrYm94IiwgewogICAgICAgICAgICAiYXR0cnMiOiB7CiAgICAgICAgICAgICAgImxhYmVsIjogaXRlbS52YWx1ZSwKICAgICAgICAgICAgICAiYm9yZGVyIjogY29uZi5ib3JkZXIKICAgICAgICAgICAgfQogICAgICAgICAgfSwgW2l0ZW0ubGFiZWxdKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGxpc3Q7CiAgICB9CiAgfSwKICAnZWwtdXBsb2FkJzogewogICAgJ2xpc3QtdHlwZSc6IGZ1bmN0aW9uIGxpc3RUeXBlKGgsIGNvbmYsIGtleSkgewogICAgICB2YXIgbGlzdCA9IFtdOwoKICAgICAgaWYgKGNvbmZbJ2xpc3QtdHlwZSddID09PSAncGljdHVyZS1jYXJkJykgewogICAgICAgIGxpc3QucHVzaChoKCJpIiwgewogICAgICAgICAgImNsYXNzIjogImVsLWljb24tcGx1cyIKICAgICAgICB9KSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGlzdC5wdXNoKGgoImVsLWJ1dHRvbiIsIHsKICAgICAgICAgICJhdHRycyI6IHsKICAgICAgICAgICAgInNpemUiOiAic21hbGwiLAogICAgICAgICAgICAidHlwZSI6ICJwcmltYXJ5IiwKICAgICAgICAgICAgImljb24iOiAiZWwtaWNvbi11cGxvYWQiCiAgICAgICAgICB9CiAgICAgICAgfSwgW2NvbmYuYnV0dG9uVGV4dF0pKTsKICAgICAgfQoKICAgICAgaWYgKGNvbmYuc2hvd1RpcCkgewogICAgICAgIGxpc3QucHVzaChoKCJkaXYiLCB7CiAgICAgICAgICAic2xvdCI6ICJ0aXAiLAogICAgICAgICAgImNsYXNzIjogImVsLXVwbG9hZF9fdGlwIgogICAgICAgIH0sIFsiXHU1M0VBXHU4MEZEXHU0RTBBXHU0RjIwXHU0RTBEXHU4RDg1XHU4RkM3ICIsIGNvbmYuZmlsZVNpemUsIGNvbmYuc2l6ZVVuaXQsICIgXHU3Njg0IiwgY29uZi5hY2NlcHQsICJcdTY1ODdcdTRFRjYiXSkpOwogICAgICB9CgogICAgICByZXR1cm4gbGlzdDsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHZhciBkYXRhT2JqZWN0ID0gewogICAgICBhdHRyczoge30sCiAgICAgIHByb3BzOiB7fSwKICAgICAgb246IHt9LAogICAgICBzdHlsZToge30KICAgIH07CiAgICB2YXIgY29uZkNsb25lID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmNvbmYpKTsKICAgIHZhciBjaGlsZHJlbiA9IFtdOwogICAgdmFyIGNoaWxkT2JqcyA9IGNvbXBvbmVudENoaWxkW2NvbmZDbG9uZS50YWddOwoKICAgIGlmIChjaGlsZE9ianMpIHsKICAgICAgT2JqZWN0LmtleXMoY2hpbGRPYmpzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICB2YXIgY2hpbGRGdW5jID0gY2hpbGRPYmpzW2tleV07CgogICAgICAgIGlmIChjb25mQ2xvbmVba2V5XSkgewogICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZEZ1bmMoaCwgY29uZkNsb25lLCBrZXkpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIE9iamVjdC5rZXlzKGNvbmZDbG9uZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHZhciB2YWwgPSBjb25mQ2xvbmVba2V5XTsKCiAgICAgIGlmIChrZXkgPT09ICd2TW9kZWwnKSB7CiAgICAgICAgdk1vZGVsKF90aGlzLCBkYXRhT2JqZWN0LCBjb25mQ2xvbmUuZGVmYXVsdFZhbHVlKTsKICAgICAgfSBlbHNlIGlmIChkYXRhT2JqZWN0W2tleV0pIHsKICAgICAgICBkYXRhT2JqZWN0W2tleV0gPSB2YWw7CiAgICAgIH0gZWxzZSBpZiAoIWlzQXR0cihrZXkpKSB7CiAgICAgICAgZGF0YU9iamVjdC5wcm9wc1trZXldID0gdmFsOwogICAgICB9IGVsc2UgewogICAgICAgIGRhdGFPYmplY3QuYXR0cnNba2V5XSA9IHZhbDsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gaCh0aGlzLmNvbmYudGFnLCBkYXRhT2JqZWN0LCBjaGlsZHJlbik7CiAgfSwKICBwcm9wczogWydjb25mJ10KfTs="},null]}